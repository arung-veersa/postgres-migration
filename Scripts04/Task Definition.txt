ENABLE_ONE_TIME_TASK
ALTER TASK CONFLICTREPORT.PUBLIC.ONE_TIME_TASK RESUME

ONE_TIME_TASK
BEGIN
    -- Run a conditional check to verify if the count is 1
    IF ((SELECT COUNT(*) 
        FROM ANALYTICS.BI.FACTDATAREFRESHSTATUS
        WHERE MODULE = 'Conflict Report'
          AND STATUS = 'success'
          AND TO_DATE(REFRESH_FINISHED_AT + INTERVAL '4 hour') = TO_DATE(CURRENT_DATE)) = 1
          
--          AND NOT EXISTS (SELECT 1 FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY
--                            WHERE query_START_TIME > CURRENT_DATE
--                            and NAME = 'TASK_1_COPY_DATA' and DATABASE_NAME = CURRENT_DATABASE()
--                            )
          )
    THEN
        -- Execute the task if condition has been satisfied
        /*ALTER TASK CONFLICTREPORT.PUBLIC.TASK_1_COPY_DATA RESUME; -- not required since we can execute the task while it is suspended by using 'execute' command as seen below*/
        EXECUTE TASK CONFLICTREPORT.PUBLIC.TASK_1_COPY_DATA;
    END IF;
  END

SEND_TASK_STATUS_EMAIL_TASK
CALL SEND_TASK_STATUS_EMAIL()

TASK_1_COPY_DATA	
DECLARE result STRING;
BEGIN
	ALTER TASK CONFLICTREPORT.PUBLIC.ONE_TIME_TASK SUSPEND;
  	CALL CONFLICTREPORT.PUBLIC.COPY_DATA_FROM_CONFLICTVISITMAPS_TO_TEMP();
END

TASK_2_UPDATE_DATA
BEGIN
  	CALL CONFLICTREPORT.PUBLIC.UPDATE_DATA_CONFLICTVISITMAPS();
END

TASK_2_UPDATE_DATA_1
BEGIN
  	CALL CONFLICTREPORT.PUBLIC.UPDATE_DATA_CONFLICTVISITMAPS_1();
END

TASK_2_UPDATE_DATA_2
BEGIN
  	CALL CONFLICTREPORT.PUBLIC.UPDATE_DATA_CONFLICTVISITMAPS_2();
END

TASK_2_UPDATE_DATA_3
BEGIN
  	CALL CONFLICTREPORT.PUBLIC.UPDATE_DATA_CONFLICTVISITMAPS_3();
END

TASK_3_INSERT_DATA
BEGIN
  CALL CONFLICTREPORT.PUBLIC.INSERT_DATA_FROM_MAIN_TO_CONFLICTVISITMAPS();
END

TASK_3_INSERT_DATA_1
BEGIN
  CALL CONFLICTREPORT.PUBLIC.INSERT_DATA_FROM_MAIN_TO_CONFLICTVISITMAPS_1();
END

TASK_3_INSERT_DATA_2
BEGIN
  CALL CONFLICTREPORT.PUBLIC.INSERT_DATA_FROM_MAIN_TO_CONFLICTVISITMAPS_2();
END

TASK_4_UPDATE_MAPS
BEGIN
  CALL CONFLICTREPORT.PUBLIC.UPDATE_CONFLICT_VISIT_MAPS();
END

TASK_5_INSERT_CONFLICTS
BEGIN
  CALL CONFLICTREPORT.PUBLIC.INSERT_CONFLICTS();
END

TASK_6_ASSIGN_GROUP_IDS
BEGIN
  CALL CONFLICTREPORT.PUBLIC.ASSIGN_GROUP_IDS();
END

TASK_7_UPDATE_PHONE_CONTACT
BEGIN
  CALL CONFLICTREPORT.PUBLIC.UPDATE_PHONE_CONTACT();
END

TASK_8_CREATE_NEW_LOG_HISTORY
BEGIN
  CALL CONFLICTREPORT.PUBLIC.CREATE_NEW_LOG_HISTORY();
END

TASK_9_CREATE_LOG_HISTORY
BEGIN
  CALL CONFLICTREPORT.PUBLIC.UPDATE_CREATE_LOG_HISTORY();
END

TASK_9_5_GET_BILLABLE_UNITS
BEGIN
  CALL CONFLICTREPORT.PUBLIC.SP_GET_FINAL_BILLABLE_UNITS_OPTIMIZED();
END

TASK_10_PROVIDER_DASHBAORD
BEGIN
  CALL CONFLICTREPORT.PUBLIC.LOAD_PROVIDER_DASHBOARD_DATA();
END

TASK_11_PAYER_DASHBAORD
BEGIN
  CALL CONFLICTREPORT.PUBLIC.LOAD_PAYER_DASHBOARD_DATA();
END

TASK_12_LOAD_PAYER_DASHBOARD_DATA_NEW
BEGIN
  CALL CONFLICTREPORT.PUBLIC.LOAD_PAYER_DASHBOARD_DATA_NEW();
END
